/*
Write C++ Program using STL for sorting and searching user defined
records such as item records using vector container.
*/
#include &lt;iostream&gt; //standard input output stream header file
#include &lt;algorithm&gt; //The STL algorithms are generic because they can operate on a variety of data
structures
#include &lt;vector&gt; //The header file for the STL vector library is vector.
using namespace std;
class Item // creating class Item
{
public:
char name[10];
int quantity;
int cost;
int code;
bool operator==(const Item&amp; i1) //Boolean operators allow you to create more complex conditional
statements
{
if(code==i1.code) //operator will return 1 if the comparison is true, or 0 if the comparison is false
return 1;
return 0;
}
bool operator&lt;(const Item&amp; i1)
{
if(code&lt;i1.code) //operator will return 1 if the comparison is true, or 0 if the comparison is false
return 1;
return 0;
}

};
vector&lt;Item&gt; o1;
void print(Item &amp;i1);
void display();
void insert();
void search();
void dlt();
bool compare(const Item &amp;i1, const Item &amp;i2)
{
//if (i1.name != i2.name) return i1.cost &lt; i2.cost;
return i1.cost &lt; i2.cost;
}
int main()
{
int ch;
do
{
cout&lt;&lt;&quot;\n* * * * * Menu * * * * *&quot;;
cout&lt;&lt;&quot;\n1.Insert&quot;;
cout&lt;&lt;&quot;\n2.Display&quot;;
cout&lt;&lt;&quot;\n3.Search&quot;;
cout&lt;&lt;&quot;\n4.Sort&quot;;
cout&lt;&lt;&quot;\n5.Delete&quot;;
cout&lt;&lt;&quot;\n6.Exit&quot;;
cout&lt;&lt;&quot;\nEnter your choice : &quot;;
cin&gt;&gt;ch;

switch(ch)
{

case 1:
insert();
break;

case 2:
display();
break;

case 3:
search();
break;

case 4:
sort(o1.begin(),o1.end(),compare);
cout&lt;&lt;&quot;\n\n Sorted on Cost : &quot;;
display();
break;

case 5:
dlt();
break;

case 6:
exit(0);
}

}while(ch!=7);
return 0;
}

void insert()
{
Item i1;
cout&lt;&lt;&quot;\nEnter Item Name : &quot;;
cin&gt;&gt;i1.name;
cout&lt;&lt;&quot;\nEnter Item Quantity : &quot;;
cin&gt;&gt;i1.quantity;
cout&lt;&lt;&quot;\nEnter Item Cost : &quot;;
cin&gt;&gt;i1.cost;
cout&lt;&lt;&quot;\nEnter Item Code : &quot;;
cin&gt;&gt;i1.code;
o1.push_back(i1);
}
void display()
{
for_each(o1.begin(),o1.end(),print);
}
void print(Item &amp;i1)
{
cout&lt;&lt;&quot;\n&quot;;
cout&lt;&lt;&quot;\nItem Name : &quot;&lt;&lt;i1.name;
cout&lt;&lt;&quot;\nItem Quantity : &quot;&lt;&lt;i1.quantity;
cout&lt;&lt;&quot;\nItem Cost : &quot;&lt;&lt;i1.cost;
cout&lt;&lt;&quot;\nItem Code : &quot;&lt;&lt;i1.code;
cout&lt;&lt;&quot;\n\n&quot;;
}
void search()
{
vector&lt;Item&gt;::iterator p;

Item i1;
cout&lt;&lt;&quot;\nEnter Item Code to search : &quot;;
cin&gt;&gt;i1.code;
p=find(o1.begin(),o1.end(),i1);
if(p==o1.end())
{
cout&lt;&lt;&quot;\nNot found!!!&quot;;
}
else
{
cout&lt;&lt;&quot;\nFound!!!&quot;;
}
}
void dlt()
{
vector&lt;Item&gt;::iterator p;
Item i1;
cout&lt;&lt;&quot;\nEnter Item Code to delete : &quot;;
cin&gt;&gt;i1.code;
p=find(o1.begin(),o1.end(),i1);
if(p==o1.end())
{
cout&lt;&lt;&quot;\nNot found!!!&quot;;
}
else
{
o1.erase(p);
cout&lt;&lt;&quot;\nDeleted!!!&quot;;
}

}
OUTPUT:-
* * * * * Menu * * * * *
1.Insert
2.Display
3.Search
4.Sort
5.Delete
6.Exit
Enter your choice : 1

Enter Item Name : fruits

Enter Item Quantity : 5

Enter Item Cost : 100

Enter Item Code : 101

* * * * * Menu * * * * *
1.Insert
2.Display
3.Search
4.Sort
5.Delete

6.Exit
Enter your choice : 2

Item Name : fruits
Item Quantity : 5
Item Cost : 100
Item Code : 101

* * * * * Menu * * * * *
1.Insert
2.Display
3.Search
4.Sort
5.Delete
6.Exit
Enter your choice : 3

Enter Item Code to search : 101

Found!!!
* * * * * Menu * * * * *
1.Insert

2.Display
3.Search
4.Sort
5.Delete
6.Exit
Enter your choice : 4

Sorted on Cost :

Item Name : fruits
Item Quantity : 5
Item Cost : 100
Item Code : 101

* * * * * Menu * * * * *
1.Insert
2.Display
3.Search
4.Sort
5.Delete
6.Exit
Enter your choice : 5

Enter Item Code to delete : 102

Not found!!!
* * * * * Menu * * * * *
1.Insert
2.Display
3.Search
4.Sort
5.Delete
6.Exit
Enter your choice :
